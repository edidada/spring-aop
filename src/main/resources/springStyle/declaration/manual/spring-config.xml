<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:component-scan base-package="io.github.yanglikun.springStyle"/>

    <bean id="userServiceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="interfaces" value="io.github.yanglikun.springStyle.target.UserService"/>
        <property name="target" ref="userService"/>
        <property name="interceptorNames">
            <list>
                <!--<value>beforeAdvice</value>-->
                <value>aroundAdvice</value>
                <!--<value>afterThrowsAdvice</value>-->
                <!--<value>afterReturnAdvice</value>-->
            </list>
        </property>
    </bean>

    <bean id="userServiceNoInterfaceProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="userServiceNoInterface"></property>
        <property name="interceptorNames">
            <list>
                <!--<value>beforeAdvice</value>-->
                <value>aroundAdvice</value>
                <!--<value>afterThrowsAdvice</value>-->
                <!--<value>afterReturnAdvice</value>-->
            </list>
        </property>
    </bean>

    <bean id="notOriginAroundAdvice" class="io.github.yanglikun.springStyle.advice.notorigin.NotOriginAroundAdvice">
       <property name="realService">
           <bean  class="io.github.yanglikun.springStyle.target.notorigin.OriginService">
               <property name="name" value="代理类"/>
           </bean>
       </property>
    </bean>


    <bean id="notCallOrigin" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="io.github.yanglikun.springStyle.target.notorigin.OriginService">
                <property name="name" value="被代理类"/>
            </bean>
        </property>
        <!--因为被代理类不会被调用，所以上面的配置可以用targetClass代替-->
        <!--<property name="targetClass" value="io.github.yanglikun.springStyle.target.notorigin.OriginService"/>-->
        <property name="interceptorNames">
            <list>
                <value>notOriginAroundAdvice</value>
            </list>
        </property>
    </bean>

    <bean id="serviceNoDefaultConstructor" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target">
            <bean class="io.github.yanglikun.springStyle.target.ServiceNoDefaultConstructor">
                <constructor-arg value="被代理类"></constructor-arg>
            </bean>
        </property>
        <property name="interceptorNames">
            <list>
                <value>aroundAdvice</value>
            </list>
        </property>
    </bean>


</beans>